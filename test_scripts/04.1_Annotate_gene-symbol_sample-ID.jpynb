{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cae27996-a7b8-421b-a806-8130570455ef",
   "metadata": {},
   "source": [
    "# Translate the Ensembl Gene IDs of the data object into Gene Symbols and add as key, var, or obs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56da0d6c-9e14-4677-b14e-4c66547c784b",
   "metadata": {},
   "source": [
    "## Load adata after processing by 01 to 04"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "eb938d57-07f0-4b7f-a665-9126fe88dc38",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scanpy as sc\n",
    "import matplotlib.pyplot as plt\n",
    "import anndata as ad\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f9c3539c-aac2-4c28-bc1d-b20dc4a1f97b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e13ae224-c883-42c0-919e-72e1ab5e1462",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = sc.read(\"/storage/users/sac43cg/res_Samantha_1/outs/per_sample_outs/filtered_preprocessed_combined_adata.h5ad\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "18b107bc-0e48-4773-8542-6848bf96c9cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 11919 × 2801\n",
       "    obs: 'condition', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'n_counts', 'percent_mito', 'percent_ribo'\n",
       "    var: 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts', 'means', 'dispersions', 'dispersions_norm', 'highly_variable'\n",
       "    uns: 'hvg'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89c6c0a8-cda2-4d02-b901-066f9ebf4b1f",
   "metadata": {},
   "source": [
    "#### Create dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "794470e1-686e-4109-93b1-f3e5223217a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from biomart import BiomartServer\n",
    "\n",
    "# Connect to the BioMart server\n",
    "server = BiomartServer(\"http://ensembl.org/biomart\")\n",
    "\n",
    "# Select the human genes dataset\n",
    "dataset = server.datasets['hsapiens_gene_ensembl']\n",
    "\n",
    "# Query BioMart to get the translation from Ensembl ID to gene symbol\n",
    "response = dataset.search({\n",
    "    'attributes': ['ensembl_gene_id', 'external_gene_name'],\n",
    "})\n",
    "\n",
    "# Initialize an empty dictionary to store the mapping\n",
    "ensembl_to_gene_name = {}\n",
    "\n",
    "# Iterate through the response lines\n",
    "for line in response.iter_lines():\n",
    "    # Decode the line and split it into Ensembl ID and gene name\n",
    "    decoded_line = line.decode('utf-8')\n",
    "    ensembl_id, gene_name = decoded_line.split('\\t')\n",
    "    \n",
    "    # Store the mapping in the dictionary\n",
    "    ensembl_to_gene_name[ensembl_id] = gene_name\n",
    "\n",
    "# Now, ensembl_to_gene_name is a dictionary with Ensembl IDs as keys and gene names as values.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ee296b3-b56f-473e-acb3-4882707e7f01",
   "metadata": {},
   "source": [
    "## Name Var_names or var->gene.symbol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1e3e249d-b0b0-4daf-afb3-4c7918e7ed69",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.var['gene_symbol'] = [ensembl_to_gene_name.get(gene_id, 'NA') for gene_id in adata.var_names]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "feacc28f-b423-42c0-acee-781e6004d385",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.var_names = [ensembl_to_gene_name.get(gene_id, gene_id) for gene_id in adata.var_names]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1553d9db-41bf-4f5d-8244-8dad45602e1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 11919 × 2801\n",
       "    obs: 'condition', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'n_counts', 'percent_mito', 'percent_ribo'\n",
       "    var: 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts', 'means', 'dispersions', 'dispersions_norm', 'highly_variable', 'gene_symbol'\n",
       "    uns: 'hvg'"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bb415da3-c467-486a-8c25-b12dcc6f0e06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "feature_id\n",
       "ENSG00000187634      SAMD11\n",
       "ENSG00000188290        HES4\n",
       "ENSG00000187608       ISG15\n",
       "ENSG00000184163    C1QTNF12\n",
       "ENSG00000162576       MXRA8\n",
       "                     ...   \n",
       "ENSG00000198695      MT-ND6\n",
       "ENSG00000198727      MT-CYB\n",
       "CMO310                   NA\n",
       "CMO311                   NA\n",
       "CMO312                   NA\n",
       "Name: gene_symbol, Length: 2801, dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.var['gene_symbol']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "defd2269-a86c-475d-89f9-0fd7373a4cc1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['SAMD11', 'HES4', 'ISG15', 'C1QTNF12', 'MXRA8', 'CCNL2', 'VWA1',\n",
       "       'ATAD3C', 'PRDM16', 'MEGF6',\n",
       "       ...\n",
       "       'MT-ND1', 'MT-ND2', 'MT-ATP8', 'MT-ND4L', 'MT-ND5', 'MT-ND6', 'MT-CYB',\n",
       "       'CMO310', 'CMO311', 'CMO312'],\n",
       "      dtype='object', length=2801)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.var_names"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de23c608-a858-4e7c-afa8-cd4119f3b812",
   "metadata": {},
   "source": [
    "## Names Sample IDs as obs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ebb49c13-9c90-4d16-985f-dcc4f5e7386f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['AAACCCAGTAGGCTCC-1', 'AAACCCAGTCGCAACC-1', 'AAACCCATCCACAAGT-1',\n",
       "       'AAACGCTTCACTACGA-1', 'AAACGCTTCAGCCTCT-1', 'AAAGAACAGATACAGT-1',\n",
       "       'AAAGAACAGCCTCGTG-1', 'AAAGAACAGTAATCCC-1', 'AAAGAACCAACATCGT-1',\n",
       "       'AAAGAACGTCGCGGTT-1',\n",
       "       ...\n",
       "       'TTGTGGATCTAGCAAC-1', 'TTGTTCACAGGTCAAG-1', 'TTGTTTGAGCTCATAC-1',\n",
       "       'TTTACGTTCAAGGCTT-1', 'TTTACTGCAGCTACAT-1', 'TTTACTGTCATTACTC-1',\n",
       "       'TTTCACAGTGATATAG-1', 'TTTCACATCGATGCAT-1', 'TTTCATGTCCCTCTAG-1',\n",
       "       'TTTGACTGTTCCGGTG-1'],\n",
       "      dtype='object', name='barcode', length=11919)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.obs_names"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e9939f4-92d4-4e9a-97b9-cc540fa6d5ed",
   "metadata": {},
   "source": [
    "### Build a new Index by combining Barcode and Conditions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52c4f188-ad0e-4f86-afc0-e5aa83d2a793",
   "metadata": {},
   "outputs": [],
   "source": [
    "#df = pd.DataFrame(adata.X, index=adata.obs.index, columns=adata.var.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68e141ef-3516-48cd-b2c2-1863f66fb14c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#df.index = df.index + '_' + adata.obs['conditions'].values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ca5aaf9b-96cb-4b77-be68-7bf3eb7a5cef",
   "metadata": {},
   "outputs": [],
   "source": [
    "def short_hash(input_string, length=8):\n",
    "    \"\"\"Get a shorter hash representation of the input string.\"\"\"\n",
    "    return str(hash(input_string))[:length]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4b6d4677-df29-4006-bbcc-bfa7685efdfc",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['index'] = [short_hash(name) for name in adata.obs_names]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "18fea574-6c4c-4bca-a6b3-b8b31cd5ef89",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.obs['IDs'] = [f\"{condition}_{name}\" for condition, name in zip(adata.obs['condition'], adata.obs['index'] )]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1de185df-8074-4a9a-9dc4-8324e8cc83ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "#optional\n",
    "adata.obs_names = adata.obs['IDs']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "adeb8ecc-db69-4556-97c1-6b922e88fcc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "barcode\n",
       "AAACCCAGTAGGCTCC-1         CTRL_1_-5325934\n",
       "AAACCCAGTCGCAACC-1         CTRL_1_73734064\n",
       "AAACCCATCCACAAGT-1         CTRL_1_66661241\n",
       "AAACGCTTCACTACGA-1         CTRL_1_68972777\n",
       "AAACGCTTCAGCCTCT-1         CTRL_1_39443226\n",
       "                              ...         \n",
       "TTTACTGTCATTACTC-1    TGFb1_GEM_2_80531720\n",
       "TTTCACAGTGATATAG-1    TGFb1_GEM_2_65665572\n",
       "TTTCACATCGATGCAT-1    TGFb1_GEM_2_-1715112\n",
       "TTTCATGTCCCTCTAG-1    TGFb1_GEM_2_-4050703\n",
       "TTTGACTGTTCCGGTG-1    TGFb1_GEM_2_44180237\n",
       "Name: IDs, Length: 11919, dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.obs['IDs']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "71592dfc-a656-4cbb-88f1-5848f399134b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['CTRL_1_-5325934', 'CTRL_1_73734064', 'CTRL_1_66661241',\n",
       "       'CTRL_1_68972777', 'CTRL_1_39443226', 'CTRL_1_-3123098',\n",
       "       'CTRL_1_-6841925', 'CTRL_1_89862927', 'CTRL_1_-1091614',\n",
       "       'CTRL_1_70994732',\n",
       "       ...\n",
       "       'TGFb1_GEM_2_67368811', 'TGFb1_GEM_2_31702166', 'TGFb1_GEM_2_55789620',\n",
       "       'TGFb1_GEM_2_-8554834', 'TGFb1_GEM_2_-5146029', 'TGFb1_GEM_2_80531720',\n",
       "       'TGFb1_GEM_2_65665572', 'TGFb1_GEM_2_-1715112', 'TGFb1_GEM_2_-4050703',\n",
       "       'TGFb1_GEM_2_44180237'],\n",
       "      dtype='object', name='IDs', length=11919)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.obs_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6ca8e694-1edd-4032-96c1-deaadeca219a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ENSG00000187634', 'ENSG00000188290', 'ENSG00000187608',\n",
       "       'ENSG00000184163', 'ENSG00000162576', 'ENSG00000221978',\n",
       "       'ENSG00000179403', 'ENSG00000215915', 'ENSG00000142611',\n",
       "       'ENSG00000162591',\n",
       "       ...\n",
       "       'ENSG00000198888', 'ENSG00000198763', 'ENSG00000228253',\n",
       "       'ENSG00000212907', 'ENSG00000198786', 'ENSG00000198695',\n",
       "       'ENSG00000198727', 'CMO310', 'CMO311', 'CMO312'],\n",
       "      dtype='object', name='feature_id', length=2801)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.var_names"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4677a98e-9d95-4f28-b404-68fac07a57d4",
   "metadata": {},
   "source": [
    "## Export"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "535e44c0-2f43-4edd-bbd7-f2de15779aa3",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata.write('/storage/users/sac43cg/res_Samantha_1/outs/per_sample_outs/annotated_adata.h5ad')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cce892a-a9a2-45d9-9a83-405296387be4",
   "metadata": {},
   "source": [
    "# Snippets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0a001b7-579a-4675-ac82-0341ad21d368",
   "metadata": {},
   "source": [
    "## If you have a dictionary of Ensembl you can extratc the counts matrix and annotate \n",
    "## the columns and rows with a Sample ID and Gene Symbols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5176cc81-5c60-4307-99f2-86d688ddb3ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Extracting data\n",
    "df = pd.DataFrame(adata.X, index=adata.obs.index, columns=adata.var.index)\n",
    "\n",
    "# 2. Combining barcodes and conditions\n",
    "df.index = df.index + '_' + adata.obs['conditions'].values\n",
    "\n",
    "# 3. Translate Ensembl IDs to Gene Symbols\n",
    "# Assuming ensembl_to_symbol is your dictionary of Ensembl ID -> Gene Symbol\n",
    "df.columns = df.columns.map(lambda x: ensembl_to_symbol.get(x, x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af546031-417c-4f5c-9bd8-1072b2e0e515",
   "metadata": {},
   "outputs": [],
   "source": [
    "counts = pd.DataFrame(adata.X, index=adata.obs_names, columns=adata.var_names)\n",
    "symbol_adata=sc.AnnData(counts)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "scanpy-env3",
   "language": "python",
   "name": "scanpy-env3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
